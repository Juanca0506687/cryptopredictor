#!/usr/bin/env python3
"""
Script de despliegue automatizado para CryptoPredictor
"""

import os
import subprocess
import sys
import json
from datetime import datetime

def print_banner():
    print("=" * 60)
    print("üöÄ CRYPTOPREDICTOR - DESPLIEGUE AUTOMATIZADO")
    print("=" * 60)
    print()

def check_requirements():
    """Verifica que todos los archivos necesarios est√©n presentes"""
    required_files = [
        'crypto_simple.py',
        'requirements.txt',
        'Procfile',
        'runtime.txt',
        'wsgi.py',
        'config.py',
        'templates/simple.html',
        '.gitignore'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå Archivos faltantes:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ Todos los archivos necesarios est√°n presentes")
    return True

def create_gitignore():
    """Crea archivo .gitignore si no existe"""
    if not os.path.exists('.gitignore'):
        gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Application specific
crypto_data.json
*.log
.env

# Heroku
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
"""
        with open('.gitignore', 'w') as f:
            f.write(gitignore_content)
        print("‚úÖ Archivo .gitignore creado")

def create_readme():
    """Crea archivo README.md si no existe"""
    if not os.path.exists('README.md'):
        readme_content = """# CryptoPredictor - Predicci√≥n de Criptomonedas con IA

Una aplicaci√≥n web moderna para predecir precios de criptomonedas utilizando inteligencia artificial y an√°lisis t√©cnico.

## üöÄ Caracter√≠sticas

- **Predicci√≥n de Precios**: Modelo de machine learning para predecir precios futuros
- **An√°lisis T√©cnico**: Indicadores RSI, SMA y m√°s
- **Comparaci√≥n de Criptomonedas**: Compara m√∫ltiples criptomonedas con score de oportunidad
- **Interfaz Moderna**: Dise√±o responsive con Tailwind CSS
- **Gr√°ficos Interactivos**: Visualizaci√≥n de predicciones con Plotly

## üõ†Ô∏è Tecnolog√≠as

- **Backend**: Flask (Python)
- **Machine Learning**: Scikit-learn
- **Datos**: Yahoo Finance API
- **Frontend**: HTML, JavaScript, Tailwind CSS
- **Gr√°ficos**: Plotly.js

## üìã Requisitos

- Python 3.8 o superior
- Conexi√≥n a internet

## üöÄ Despliegue

### Heroku
```bash
# Crear aplicaci√≥n en Heroku
heroku create tu-app-name

# Configurar variables de entorno
heroku config:set SECRET_KEY=tu_clave_secreta

# Desplegar
git push heroku main
```

### Railway
```bash
# Conectar con Railway
railway login
railway init
railway up
```

### Render
```bash
# Conectar con Render
# Crear nuevo Web Service
# Conectar con GitHub
# Configurar build command: pip install -r requirements.txt
# Configurar start command: gunicorn crypto_simple:app
```

## üìä Uso

1. Accede a la aplicaci√≥n web
2. Selecciona una criptomoneda
3. Elige el n√∫mero de d√≠as a predecir
4. Haz clic en "Predecir Precios"
5. Revisa los resultados y consejos de inversi√≥n

## ‚ö†Ô∏è Advertencia

Esta aplicaci√≥n es solo para fines educativos. Las predicciones no constituyen consejos financieros.

## üìù Licencia

MIT License

---
**¬°Disfruta prediciendo el futuro de las criptomonedas! üöÄ**
"""
        with open('README.md', 'w') as f:
            f.write(readme_content)
        print("‚úÖ Archivo README.md creado")

def setup_git():
    """Configura Git si no est√° inicializado"""
    if not os.path.exists('.git'):
        try:
            subprocess.run(['git', 'init'], check=True)
            subprocess.run(['git', 'add', '.'], check=True)
            subprocess.run(['git', 'commit', '-m', 'Initial commit - CryptoPredictor'], check=True)
            print("‚úÖ Repositorio Git inicializado")
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è  No se pudo inicializar Git (puede que no est√© instalado)")
    else:
        print("‚úÖ Repositorio Git ya existe")

def deploy_to_heroku():
    """Gu√≠a para desplegar en Heroku"""
    print("\nüåê DESPLIEGUE EN HEROKU")
    print("=" * 40)
    print("1. Instala Heroku CLI: https://devcenter.heroku.com/articles/heroku-cli")
    print("2. Ejecuta estos comandos:")
    print()
    print("   # Login en Heroku")
    print("   heroku login")
    print()
    print("   # Crear aplicaci√≥n")
    print("   heroku create tu-cryptopredictor-app")
    print()
    print("   # Configurar variables")
    print("   heroku config:set SECRET_KEY=tu_clave_secreta_aqui")
    print()
    print("   # Desplegar")
    print("   git push heroku main")
    print()
    print("   # Abrir aplicaci√≥n")
    print("   heroku open")
    print()

def deploy_to_railway():
    """Gu√≠a para desplegar en Railway"""
    print("\nüöÇ DESPLIEGUE EN RAILWAY")
    print("=" * 40)
    print("1. Ve a https://railway.app")
    print("2. Conecta tu cuenta de GitHub")
    print("3. Crea un nuevo proyecto")
    print("4. Selecciona 'Deploy from GitHub repo'")
    print("5. Selecciona este repositorio")
    print("6. Railway detectar√° autom√°ticamente que es una app Flask")
    print("7. ¬°Listo! Tu app estar√° disponible en la URL que te proporcione Railway")
    print()

def deploy_to_render():
    """Gu√≠a para desplegar en Render"""
    print("\nüé® DESPLIEGUE EN RENDER")
    print("=" * 40)
    print("1. Ve a https://render.com")
    print("2. Conecta tu cuenta de GitHub")
    print("3. Crea un nuevo 'Web Service'")
    print("4. Selecciona este repositorio")
    print("5. Configura:")
    print("   - Build Command: pip install -r requirements.txt")
    print("   - Start Command: gunicorn crypto_simple:app")
    print("6. ¬°Listo! Tu app estar√° disponible en la URL que te proporcione Render")
    print()

def main():
    print_banner()
    
    # Verificar archivos
    if not check_requirements():
        print("\n‚ùå Por favor, aseg√∫rate de que todos los archivos est√©n presentes")
        return
    
    # Crear archivos adicionales
    create_gitignore()
    create_readme()
    setup_git()
    
    print("\nüéâ ¬°PREPARACI√ìN COMPLETADA!")
    print("=" * 40)
    print("Tu aplicaci√≥n est√° lista para ser desplegada.")
    print("Elige una plataforma de despliegue:")
    print()
    print("1. Heroku (Recomendado para principiantes)")
    print("2. Railway (Gratis, f√°cil de usar)")
    print("3. Render (Gratis, bueno para proyectos)")
    print()
    
    choice = input("¬øQu√© plataforma prefieres? (1/2/3): ").strip()
    
    if choice == "1":
        deploy_to_heroku()
    elif choice == "2":
        deploy_to_railway()
    elif choice == "3":
        deploy_to_render()
    else:
        print("Mostrando todas las opciones:")
        deploy_to_heroku()
        deploy_to_railway()
        deploy_to_render()
    
    print("\nüìö RECURSOS ADICIONALES:")
    print("- Documentaci√≥n Flask: https://flask.palletsprojects.com/")
    print("- Heroku Dev Center: https://devcenter.heroku.com/")
    print("- Railway Docs: https://docs.railway.app/")
    print("- Render Docs: https://render.com/docs")
    print()
    print("¬°Buena suerte con tu despliegue! üöÄ")

if __name__ == "__main__":
    main() 